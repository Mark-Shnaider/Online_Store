- Сначала создаем репозиторий в Github, затем клонируем его (git clone <URL>) в локальный репозиторий. Затем можно работать и пушить.
- В сервисе можно работать с DbContext.
- Класс DTO должен содержать только те данные, которые мы собираемся передать на уровень представления или, наоборот, получить с этого уровня.
В идеале, должны быть только свойства(properties)
- UnitOfWork представляет собой класс DbContext(или свой какой-то AppContext), а DbSet - репозитории(для каждой сущности)
servicehost
automapper используется в сервисах и контроллерах
- SelectList with asp-items: https://stackoverflow.com/questions/34624034/select-tag-helper-in-asp-net-core-mvc
- EntityFramewok - если фейлится проверить, что нет ошибок(собрать проект)
-В дебаг online_store  в npm data

Итого ServiceHost == ServiceProvider, BaseService их юзает, чтобы связываться с остальными сервисами
в startup мы не трогаем BaseService. Мы привязываем интерфейсы к их реализации
все зависимости в конструкторе BaseService в рантайме автоматически резолвятся

/Products/Product/Details/12908a4b-70ae-4846-b738-23c7c395f8bd
/Identity/Account/Register
/Admin/Product/Create
/Admin/Role/Index

Менял стартовую страницу в launcgsetting.json добавил  строку  launchurl в profiles/ Мб проблемы будут при деплое
https://stackoverflow.com/questions/40646815/how-to-set-start-page-in-dotnet-core-web-api
"launchUrl": "https://localhost:44326/Identity/Account/Index",

Убрал зависимости проекта в ItemGroup у 
    <ProjectReference Include="..\Data\Data.csproj" />


Пофиксить проблему, если есть категории, у которых есть товары

Сделать, чтобы можно было просмотреть пароль(через глазик например) и добавить поле подветрждение пароля(UserVM)


Доделать дизайн кнопочек и возращение обратно везде

Исправить,  что при входе нулевой юзер

Разбить на категории
Admin
VeryGood1_

https://github.com/bugdaryan/FoodStore/tree/master/Shop.Data

<form>
                    <a class="btn btn-primary" asp-controller="Product" asp-action="Details" asp-route-id="@product.Id">Подробнее</a> <br />
                    <a class="btn btn-primary" asp-controller="ShoppingCart" asp-action="Add" asp-route-id="@product.Id">Добавить в корзину</a> <br />
                    <a class="btn btn-primary" asp-controller="ShoppingCart" asp-action="Add" asp-route-id="@product.Id">Убрать из корзины</a>
                </form>


<form asp-controller="ShoppingCart" asp-action="Add" method="get" class="form-horizontal" role="form">
                    <a onclick="changeValue(document.getElementById('@product.Id.ToString()', document.getElementById('@(product.GetHashCode())'), @product.Quantity, 1)">Minus</a>
                    <input id="@product.Id" asp-for="@product.Amount" style="width:20%" type="text" oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');">
                    <a onclick="changeValue(document.getElementById('amount-input-'+@product.Id.ToString()),document.getElementById('foodTotal-@(product.GetHashCode())'), @product.Quantity, -1)">Minus</a>
                    <div class="btn-cart">
                        <input value="Add to cart" type="submit" class="btn btn-success" asp-controller="ShoppingCart" asp-action="Add" asp-route-id="@product.Id" asp-route-amount="@product.Quantity" asp-route-returnUrl="@Context.Request.Path" />
                    </div>
                </form>


<a onclick="changeValue(document.getElementById('@product.Id.ToString()', document.getElementById('@(product.GetHashCode())'), @product.Quantity, 1)">Minus</a>
- Сначала создаем репозиторий в Github, затем клонируем его (git clone <URL>) в локальный репозиторий. Затем можно работать и пушить.
- В сервисе можно работать с DbContext.
- Класс DTO должен содержать только те данные, которые мы собираемся передать на уровень представления или, наоборот, получить с этого уровня.
В идеале, должны быть только свойства(properties)
- UnitOfWork представляет собой класс DbContext(или свой какой-то AppContext), а DbSet - репозитории(для каждой сущности)
servicehost
automapper используется в сервисах и контроллерах
- SelectList with asp-items: https://stackoverflow.com/questions/34624034/select-tag-helper-in-asp-net-core-mvc
- EntityFramewok - если фейлится проверить, что нет ошибок(собрать проект)
- В дебагере online_store  в npm data

Итого ServiceHost == ServiceProvider, BaseService их юзает, чтобы связываться с остальными сервисами
в startup мы не трогаем BaseService. Мы привязываем интерфейсы к их реализации
все зависимости в конструкторе BaseService в рантайме автоматически резолвятся

Менял стартовую страницу в launcgsetting.json добавил  строку  launchurl в profiles/ Мб проблемы будут при деплое
https://stackoverflow.com/questions/40646815/how-to-set-start-page-in-dotnet-core-web-api
"launchUrl": "https://localhost:44326/Identity/Account/Index",

Убрал зависимости проекта в ItemGroup у 
    <ProjectReference Include="..\Data\Data.csproj" />

Сделать, чтобы можно было просмотреть пароль(через глазик например) и добавить поле подветрждение пароля(UserVM)



Пофиксить проблему, чтобы сразу проверялось значение товаров(в input)

Добавить юзеру shopcart
Исправить,что когда вводишь цифру изменялось количество товара сверху
Admin
VeryGood1_



@section Scripts {
    @{await Html.RenderPartialAsync("~/Views/Shared/_ValidationScriptsPartial.cshtml");}
}